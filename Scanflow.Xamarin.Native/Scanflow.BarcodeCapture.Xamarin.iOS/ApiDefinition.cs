using System;
using AVFoundation;
using CoreGraphics;
using CoreLocation;
using CoreMedia;
using CoreVideo;
using Foundation;
using ObjCRuntime;
using UIKit;

namespace Scanflow.BarcodeCapture.Xamarin.iOS
{

    // @interface ScanflowBarCodeManager
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface ScanflowBarCodeManager
    {
        // -(instancetype _Nonnull)init:(UIView * _Nonnull)previewView :(ScannerType * _Nonnull)scannerMode :(OveylayViewApperance * _Nonnull)overlayApperance :(BOOL)overCropNeed :(UIColor * _Nonnull)leftTopArc :(UIColor * _Nonnull)leftDownArc :(UIColor * _Nonnull)rightTopArc :(UIColor * _Nonnull)rightDownArc :(BOOL)locationNeed __attribute__((objc_designated_initializer));
        [Export("init:::::::::")]
        [DesignatedInitializer]
        System.IntPtr Constructor(UIView previewView, ScannerType scannerMode, OveylayViewApperance overlayApperance, bool overCropNeed, UIColor leftTopArc, UIColor leftDownArc, UIColor rightTopArc, UIColor rightDownArc, bool locationNeed);

        [Wrap("WeakCaptureDelegate")]
        [NullAllowed]
        CaptureDelegate CaptureDelegate { get; set; }

        // @property (nonatomic, weak) id<CaptureDelegate> _Nullable captureDelegate;
        [NullAllowed, Export("captureDelegate", ArgumentSemantic.Weak)]
        NSObject WeakCaptureDelegate { get; set; }



        // -(void)updateOverlay:(BOOL)isHidden;
        [Export("updateOverlay:")]
        void UpdateOverlay(bool isHidden);

        // -(void)startSession;
        [Export("startSession")]
        void StartSession();

        // -(void)validateLicense:(NSString * _Nonnull)authKey;
        [Export("validateLicense:")]
        void ValidateLicense(string authKey);

        // -(void)touchToZoomButtonAction;
        [Export("touchToZoomButtonAction")]
        void TouchToZoomButtonAction();

        // -(void)flashLight:(BOOL)enable;
        [Export("flashLight:")]
        void FlashLight(bool enable);

        // -(void)stopSession;
        [Export("stopSession")]
        void StopSession();



        [Wrap("WeakDelegate")]
        [NullAllowed]
        ScanflowCameraManagerDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<ScanflowCameraManagerDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        [Wrap("WeakLicenceDelegate")]
        [NullAllowed]
        LicenseDelegate LicenceDelegate { get; set; }

        // @property (nonatomic, weak) id<LicenseDelegate> _Nullable licenceDelegate;
        [NullAllowed, Export("licenceDelegate", ArgumentSemantic.Weak)]
        NSObject WeakLicenceDelegate { get; set; }




        // -(void)retryLicenceValidation:(NSString * _Nonnull)key;
        [Export("retryLicenceValidation:")]
        void RetryLicenceValidation(string key);
    }

    // @protocol LicenseDelegate
    [BaseType(typeof(NSObject))]
    [Protocol, Model(AutoGeneratedName = true)]
    interface LicenseDelegate
    {
        // @required -(void)licenceOnSuccessWithResponse:(NSString * _Nonnull)response;
        [Abstract]
        [Export("licenceOnSuccessWithResponse:")]
        void LicenceOnSuccessWithResponse(string response);

        // @required -(void)licenceOnFailureWithError:(NSString * _Nonnull)error;
        [Abstract]
        [Export("licenceOnFailureWithError:")]
        void LicenceOnFailureWithError(string error);
    }

    [BaseType(typeof(NSObject))]
    [Protocol, Model(AutoGeneratedName = true)]
    interface ScanflowCameraManagerDelegate
    {
        // @required -(void)presentCameraPermissionsDeniedAlert;
        [Abstract]
        [Export("presentCameraPermissionsDeniedAlert")]
        void PresentCameraPermissionsDeniedAlert();

        // @required -(void)locationAccessDeniedAlert;
        [Abstract]
        [Export("locationAccessDeniedAlert")]
        void LocationAccessDeniedAlert();

        // @required -(void)presentVideoConfigurationErrorAlert;
        [Abstract]
        [Export("presentVideoConfigurationErrorAlert")]
        void PresentVideoConfigurationErrorAlert();

        // @required -(void)sessionRunTimeErrorOccurred;
        [Abstract]
        [Export("sessionRunTimeErrorOccurred")]
        void SessionRunTimeErrorOccurred();

        // @required -(void)sessionWasInterrupted:(BOOL)resumeManually;
        [Abstract]
        [Export("sessionWasInterrupted:")]
        void SessionWasInterrupted(bool resumeManually);

        // @required -(void)sessionWasInterrupted;
        [Abstract]
        [Export("sessionWasInterrupted")]
        void SessionWasInterrupted();

        // @required -(void)captured:(CVPixelBufferRef _Nonnull)originalframe :(CGRect)overlayFrame :(UIImage * _Nonnull)croppedImage;
        [Abstract]
        [Export("captured:::")]
        void Captured(CVPixelBuffer originalframe, CGRect overlayFrame, UIImage croppedImage);

        // @required -(void)capturedOutput:(NSString * _Nonnull)result :(ScannerType * _Nonnull)codeType :(NSArray<NSString *> * _Nullable)results :(UIImage * _Nullable)processedImage :(CLLocation * _Nullable)location;
        [Abstract]
        [Export("capturedOutput:::::")]
        void CapturedOutput(string result, ScannerType codeType, [NullAllowed] string[] results, [NullAllowed] UIImage processedImage, [NullAllowed] CLLocation location);

        // @required -(void)showAlert:(NSString * _Nullable)title :(NSString * _Nonnull)message;
        [Abstract]
        [Export("showAlert::")]
        void ShowAlert([NullAllowed] string title, string message);
    }

    // @interface ScanflowBarcode_Swift_325 (ScanflowBarCodeManager)
    [BaseType(typeof(NSObject))]
    [Protocol, Model(AutoGeneratedName = true)]
    interface CaptureDelegate
    {
        // -(void)readData:(CVPixelBufferRef _Nonnull)originalframe :(CVPixelBufferRef _Nonnull)croppedFrame;
        [Export("readData::")]
        void ReadData(CVPixelBuffer originalframe, CVPixelBuffer croppedFrame);
    }

    // @interface ScannerType : NSObject
    [BaseType(typeof(NSObject))]
    [DisableDefaultCtor]
    interface ScannerType
    {
        // @property (readonly, nonatomic, strong, class) ScannerType * _Nonnull qrcode;
        [Static]
        [Export("qrcode", ArgumentSemantic.Strong)]
        ScannerType Qrcode { get; }

        // @property (readonly, nonatomic, strong, class) ScannerType * _Nonnull barcode;
        [Static]
        [Export("barcode", ArgumentSemantic.Strong)]
        ScannerType Barcode { get; }

        // @property (readonly, nonatomic, strong, class) ScannerType * _Nonnull any;
        [Static]
        [Export("any", ArgumentSemantic.Strong)]
        ScannerType Any { get; }

        // @property (readonly, nonatomic, strong, class) ScannerType * _Nonnull oneOfMany;
        [Static]
        [Export("oneOfMany", ArgumentSemantic.Strong)]
        ScannerType OneOfMany { get; }

        // @property (readonly, nonatomic, strong, class) ScannerType * _Nonnull batchInventory;
        [Static]
        [Export("batchInventory", ArgumentSemantic.Strong)]
        ScannerType BatchInventory { get; }

        // @property (readonly, nonatomic, strong, class) ScannerType * _Nonnull pivotView;
        [Static]
        [Export("pivotView", ArgumentSemantic.Strong)]
        ScannerType PivotView { get; }

        // @property (readonly, nonatomic, strong, class) ScannerType * _Nonnull tire;
        [Static]
        [Export("tire", ArgumentSemantic.Strong)]
        ScannerType Tire { get; }

        // @property (readonly, nonatomic, strong, class) ScannerType * _Nonnull containerHorizontal;
        [Static]
        [Export("containerHorizontal", ArgumentSemantic.Strong)]
        ScannerType ContainerHorizontal { get; }

        // @property (readonly, nonatomic, strong, class) ScannerType * _Nonnull containerVertical;
        [Static]
        [Export("containerVertical", ArgumentSemantic.Strong)]
        ScannerType ContainerVertical { get; }

        // @property (readonly, nonatomic) NSInteger value;
        [Export("value")]
        nint Value { get; }
    }

    // @interface OveylayViewApperance : NSObject
    [BaseType(typeof(NSObject))]
    [DisableDefaultCtor]
    interface OveylayViewApperance
    {
        // @property (readonly, nonatomic, strong, class) OveylayViewApperance * _Nonnull square;
        [Static]
        [Export("square", ArgumentSemantic.Strong)]
        OveylayViewApperance Square { get; }

        // @property (readonly, nonatomic, strong, class) OveylayViewApperance * _Nonnull rectangle;
        [Static]
        [Export("rectangle", ArgumentSemantic.Strong)]
        OveylayViewApperance Rectangle { get; }

        // @property (readonly, nonatomic, strong, class) OveylayViewApperance * _Nonnull hide;
        [Static]
        [Export("hide", ArgumentSemantic.Strong)]
        OveylayViewApperance Hide { get; }

        // @property (readonly, nonatomic, strong, class) OveylayViewApperance * _Nonnull horizontalRectangle;
        [Static]
        [Export("horizontalRectangle", ArgumentSemantic.Strong)]
        OveylayViewApperance HorizontalRectangle { get; }

        // @property (readonly, nonatomic, strong, class) OveylayViewApperance * _Nonnull containerHorizantal;
        [Static]
        [Export("containerHorizantal", ArgumentSemantic.Strong)]
        OveylayViewApperance ContainerHorizantal { get; }

        // @property (readonly, nonatomic, strong, class) OveylayViewApperance * _Nonnull containerVerticle;
        [Static]
        [Export("containerVerticle", ArgumentSemantic.Strong)]
        OveylayViewApperance ContainerVerticle { get; }

        // @property (readonly, nonatomic) NSInteger value;
        [Export("value")]
        nint Value { get; }
    }

}


